#!/usr/bin/env bash
# This script was generated by bashly 0.8.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

version_command() {
  echo "$version"
}

habanalabs_installer.sh_usage() {
  if [[ -n $long_usage ]]; then
    printf "habanalabs-installer.sh - Habanalabs install script\n"
    echo

  else
    printf "habanalabs-installer.sh - Habanalabs install script\n"
    echo

  fi

  printf "Usage:\n"
  printf "  habanalabs-installer.sh [command]\n"
  printf "  habanalabs-installer.sh [command] --help | -h\n"
  printf "  habanalabs-installer.sh --version | -v\n"
  echo

  printf "Commands:\n"
  echo "  install     Install habanalabs environment (default)"
  echo "  uninstall   Uninstall habanalabs environment"
  echo "  upgrade     Upgrade habanalabs environment"
  echo "  validate    Validate system environment and print report"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    printf "Environment Variables:\n"

    echo "  HABANA_SERVER_NAME"
    printf "    Set your server name\n"
    printf "    Default: vault.habana.ai\n"
    echo

    echo "  HABANALABS_INSTALLER_LOG"
    printf "    Install log filepath\n"
    printf "    Default: $HOME/habanalabs-installer-log/install-$(date -d "today" +"%Y-%m-%d-%H-%M-%S").log\n"
    echo

    echo "  HABANALABS_VIRTUAL_DIR"
    printf "    User virtual environment path\n"
    printf "    Default: $HOME/habanalabs-venv\n"
    echo

  fi
}

habanalabs_installer.sh_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "habanalabs-installer.sh install - Install habanalabs environment\n"
    echo

  else
    printf "habanalabs-installer.sh install - Install habanalabs environment\n"
    echo

  fi

  printf "Usage:\n"
  printf "  habanalabs-installer.sh install [options]\n"
  printf "  habanalabs-installer.sh install --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --type, -t INSTALL_TYPE"
    printf "    Install type (repo-only, base, dependencies, pytorch)\n"
    printf "    Default: base\n"
    echo

    echo "  --force, -y"
    printf "    Skip confirm prompt\n"
    echo

    echo "  --venv"
    printf "    Install python packages in venv (yes/no)\n"
    echo

    echo "  --skip-driver-load"
    printf "    Skip load Habanalabs driver\n"
    echo

    echo "  --skip-install-firmware"
    printf "    Skip install Habanalabs firmware\n"
    echo

    echo "  --private-access-name PRIVATE_ACCESS_NAME"
    printf "    Enables private access mode\n"
    printf "    Default: \n"
    echo

    echo "  --private-access-token PRIVATE_ACCESS_TOKEN"
    printf "    Token required for private access mode\n"
    printf "    Default: \n"
    echo

    echo "  --verbose, -v"
    printf "    Enable verbose output\n"
    echo

    echo "  --skip-habanalabs-repo"
    printf "    Skip adding Habanalabs repository\n"
    echo

  fi
}

habanalabs_installer.sh_uninstall_usage() {
  if [[ -n $long_usage ]]; then
    printf "habanalabs-installer.sh uninstall - Uninstall habanalabs environment\n"
    echo

  else
    printf "habanalabs-installer.sh uninstall - Uninstall habanalabs environment\n"
    echo

  fi

  printf "Usage:\n"
  printf "  habanalabs-installer.sh uninstall [options]\n"
  printf "  habanalabs-installer.sh uninstall --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --type, -t UNINSTALL_TYPE"
    printf "    Uninstall type (base only)\n"
    printf "    Default: base\n"
    echo

    echo "  --force, -y"
    printf "    Skip confirm prompt\n"
    echo

    echo "  --verbose, -v"
    printf "    Enable verbose output\n"
    echo

  fi
}

habanalabs_installer.sh_upgrade_usage() {
  if [[ -n $long_usage ]]; then
    printf "habanalabs-installer.sh upgrade - Upgrade habanalabs environment\n"
    echo

  else
    printf "habanalabs-installer.sh upgrade - Upgrade habanalabs environment\n"
    echo

  fi

  printf "Usage:\n"
  printf "  habanalabs-installer.sh upgrade [options]\n"
  printf "  habanalabs-installer.sh upgrade --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --type, -t UPGRADE_TYPE"
    printf "    Upgrade type (all, base, dependencies, pytorch)\n"
    printf "    Default: all\n"
    echo

    echo "  --venv"
    printf "    Install python packages in venv (yes/no)\n"
    echo

    echo "  --skip-driver-load"
    printf "    Skip load Habanalabs driver\n"
    echo

    echo "  --skip-install-firmware"
    printf "    Skip install Habanalabs firmware\n"
    echo

    echo "  --verbose, -v"
    printf "    Enable verbose output\n"
    echo

  fi
}

habanalabs_installer.sh_validate_usage() {
  if [[ -n $long_usage ]]; then
    printf "habanalabs-installer.sh validate - Validate system environment and print report\n"
    echo

  else
    printf "habanalabs-installer.sh validate - Validate system environment and print report\n"
    echo

  fi

  printf "Usage:\n"
  printf "  habanalabs-installer.sh validate\n"
  printf "  habanalabs-installer.sh validate --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

HABANA_RELEASE_VERSION="1.20.1"
HABANA_RELEASE_ID="97"
HABANALABS_SCRIPT_LOCK_FILE="/tmp/habanalabs-installer.lock"
REWRITE_CONF="no"
HEADER_VER=$(uname -r)
SUPPORTED_OS=(ubuntu24.04 ubuntu22.04 centos7 centos8 rocky9.3 amzn2 rhel8.6 rhel9.2 rhel9.4 debian10.10 tencentos3.1 sles15.5)
HABANALABS_PRE_REQUIRED="habanalabs-firmware"
HABANALABS_DRIVER="habanalabs"
HABANALABS_REQUIRED="habanalabs-rdma-core habanalabs-thunk habanalabs-graph"
HABANALABS_OPTIONAL="habanalabs-firmware-tools habanalabs-firmware-odm habanalabs-qual"
HABANALABS_REPO_PATH="artifactory/gaudi-installer/repos"
HABANALABS_REPO_FILE="habanalabs_synapseai.repo"
HABANALABS_SERVER_PT_DIR="artifactory/gaudi-pt-modules"
OPENMPI_VERSION="4.1.5"
OPENMPI_ROOT="/opt/habanalabs/openmpi-${OPENMPI_VERSION}"

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

BASIC_SCRIPT_DEPENDENCIES="gcc cmake lsof curl wget file jq"

DEB_DEPENDENCIES="linux-headers-${HEADER_VER} ethtool libelf-dev libbz2-dev liblzma-dev libibverbs-dev librdmacm-dev dkms"
HABANALABS_BASE_DEPENDENCIES=""
_DEPENDENCIES="sudo yum-utils which" # kernel-headers-${HEADER_VER} kernel-devel-${HEADER_VER}"
_SUDO_CMD="sudo"
_HABANALABS_REPO_DIR="/etc/yum.repos.d"
__verbose_mode="no"
__suffix__=""
__separator__="-"
__install_epel__="true"
__python_user_opt=""
MIN_PYTHON_VER="3.8"
_DEBIAN_PYTHON_VERSION="3.8.10"
_RHEL_PYTHON_VERSION="3.10.9"
_TENCENTOS_PYTHON_VERSION="3.10.14"

HABANALABS_PROFILE_FILE="/etc/profile.d/habanalabs.sh"
HABANALABS_SRC_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} jemalloc mesa-libGL cmake"
HABANALABS_PIP_VERSION="22.2.2"
SETUPTOOLS_VERSION=67.3.3
HABANALABS_PT_PIP_VERSION=$HABANALABS_PIP_VERSION
HABANALABS_PT_SETUPTOOLS_VERSION=$SETUPTOOLS_VERSION
HABANALABS_PT_SETUPTOOLS_VERSION_DEBIAN=$SETUPTOOLS_VERSION
HABANALABS_PT_VERSION="2.6.0"
DEFAULT_OPENMPI_DOWNLOAD_URL="https://download.open-mpi.org/release/open-mpi/v4.1"
MINIMAL_CMAKE_VERSION="3.13.0"
LATEST_CMAKE_VERSION="3.24.2"
HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip libcurl4 moreutils iproute2 libcairo2-dev libglib2.0-dev libselinux1-dev libnuma-dev libpcre2-dev libatlas-base-dev libjpeg-dev liblapack-dev libnuma-dev google-perftools numactl libopenblas-dev"
HABANALABS_EXTRA_INDEX_URL="https://vault.habana.ai/artifactory/api/pypi/gaudi-python/simple"
HABANALABS_LIBFABRIC_VERSION="1.20.0"
HABANALABS_LIBFABRIC_ROOT="/opt/habanalabs/libfabric-${HABANALABS_LIBFABRIC_VERSION}"
_BREAK_ON_ERROR="no"
OVERWRITE_CONF_FILES=""
HABANALABS_PYTHON_DEPENDENCIES_OPENSSL="1.1.1w"
HABANALABS_OFI_VERSION="0.0.1"
RDMA_CORE_SRC="/opt/rdma-core"
RDMA_CORE_SRC_VER="49.0"
HABANALABS_MLNX_DEPENDENCIES=""
HABANALABS_MLNX_REPO_PATH="artifactory/gaudi-installer/deps"
HABANALABS_MLNX_OFED_VERSION="MLNX_OFED_LINUX-5.8-3.0.7.0-rhel8.4-x86_64.tgz"
HABANALABS_PKG_INSTALL_OPTION=""
HABANALABS_K8S_DEPENDENCIES=""
HABANALABS_K8S_OPTIONAL="habanalabs-firmware-odm"
GENERATE_REPOS=TRUE

# detect OS
function detect_os() {
    local __dist_type="redhat"
    if [ -f /etc/os-release ];then
        # shellcheck source=/dev/null
        source /etc/os-release
    else
        fatal "OS detection failed"
    fi
    export OS_NAME=$ID
    if [[ "${ID}" == "debian" && "${VERSION_ID}" == "10"  ]]; then
        VERSION_ID="10.10"
    fi
    export OS_VERSION=$VERSION_ID
    export OS_VERSION_CODENAME=$VERSION_CODENAME

    if [[ "${ID_LIKE}" == "debian"  || "${ID}" == "debian" ]]; then
        __dist_type="debian"
    fi
    export OS_DISTRIBUTION_TYPE="${__dist_type}"
}

function detect_device(){
    __DEFAULT_HL_DEVICE=
    __pcidev=$(grep PCI_ID /sys/bus/pci/devices/*/uevent | grep -i 1da3: || echo "")
    if echo $__pcidev | grep -qE '1000|1001|1010|1011'; then
        __DEFAULT_HL_DEVICE="gaudi"
    elif echo $__pcidev | grep -qE '1020|1030'; then
        __DEFAULT_HL_DEVICE="gaudi2"
    elif echo $__pcidev | grep -qE '1060'; then
        __DEFAULT_HL_DEVICE="gaudi3"
    fi
    export HL_DEVICE=$__DEFAULT_HL_DEVICE
}

function __detect_installed_python(){
    if ! __check_installed_python ; then
        _BREAK_ON_ERROR="yes"
        error "Python ${MIN_PYTHON_VER} was not found and will be install with dependencies."
    else
        tablerow "Python ${MIN_PYTHON_VER}" "$(info "[OK]")"
    fi
}

function __check_installed_python(){
    local ret_code="0"
    if ! command -v "python${MIN_PYTHON_VER}" &>/dev/null; then
        ret_code="1"
    fi
    return $ret_code
}

function __check_mlnxofed_install(){
    case $OS_NAME in
        "tencentos")
            if [[ ! -d /usr/src/ofa_kernel/$(uname -i)/$(uname -r)/include/rdma ]]; then
                error "MLNX_OFED package not found in /usr/src/ofa_kernel/$(uname -i)/$(uname -r)"
                fatal "Please install MLNX_OFED package, restart openibd service and rerun habanalabs-installer.sh"
            fi
        ;;
    esac
}

function __install_python_basic(){
    if ! __check_installed_python ; then
        case $OS_NAME in
            "debian")
                __install_python_from_source "${_DEBIAN_PYTHON_VERSION}"
            ;;
            "rhel")
                case $OS_VERSION in
                    "8.6"|"9.4")
                        $_SUDO_CMD $__pkg__ install -y python${MIN_PYTHON_VER} 2>/dev/null
                        $_SUDO_CMD alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 2
                        $_SUDO_CMD alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1 | true # ignore error
                        $_SUDO_CMD alternatives --set python3 /usr/bin/python3.11
                    ;;
                    *)
                    __install_python_from_source "${_RHEL_PYTHON_VERSION}"
                    ;;
                esac
            ;;
            "ubuntu")
                $_SUDO_CMD $__pkg__ install -y python${MIN_PYTHON_VER} 2>/dev/null
            ;;
            "centos"|"amzn")
                if [[ $OS_NAME == "amzn" ]]; then
                    $_SUDO_CMD amazon-linux-extras install -y python${MIN_PYTHON_VER} 2>/dev/null
                fi
            ;;
            tencentos)
                __install_openssl_from_source "${HABANALABS_PYTHON_DEPENDENCIES_OPENSSL}"
                __install_python_from_source "${_TENCENTOS_PYTHON_VERSION}"
                $_SUDO_CMD alternatives --install /usr/bin/python3 python3 /usr/local/bin/python${MIN_PYTHON_VER} 4
                $_SUDO_CMD alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3
                $_SUDO_CMD alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 2
                $_SUDO_CMD alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1
                $_SUDO_CMD alternatives --set python3 /usr/local/bin/python${MIN_PYTHON_VER}
            ;;
        esac
    fi
}

function __install_python_dependencies(){
    local _NO_DOT_PYTHONVER=$(echo $MIN_PYTHON_VER | sed -e "s/\.//g")
    __install_python_basic
    case $OS_NAME in
        "ubuntu")
            $_SUDO_CMD $__pkg__ install -y python${MIN_PYTHON_VER}-dev python3-pip python${MIN_PYTHON_VER}-venv python3-testresources 2>/dev/null
        ;;

        "rhel")
            case $OS_VERSION in
                "9.4")
                    $_SUDO_CMD $__pkg__ install -y python${MIN_PYTHON_VER}-devel python${MIN_PYTHON_VER}-pip python${MIN_PYTHON_VER}-tkinter sqlite-devel readline-devel xz-devel 2>/dev/null
                ;;
            esac
        ;;
        "centos"|"amzn")
            $_SUDO_CMD $__pkg__ install -y python${_NO_DOT_PYTHONVER}-devel python3-pip 2>/dev/null
        ;;
    esac

}

function __print_env(){
    header "Environment"
    __enable_output_log_to_tty
    if [ -z $HL_DEVICE ]; then
        error "Cannot identify Habana device"
    else
        tablerow "Device" "$(info "${HL_DEVICE}")"
    fi
    tablerow "OS" "$(info "${OS_NAME}")"
    tablerow "OS version" "$(info "${OS_VERSION}")"
    tablerow "Log file" "$(info "$HABANALABS_INSTALLER_LOG")"
    tablerow "Release version" "$(info "${HABANA_RELEASE_VERSION}-${HABANA_RELEASE_ID}")"
    tablerow "Habanalabs server" "$(info "${HABANA_SERVER_NAME}")"
    tablerow "Rewrite installer config" "$(info "${REWRITE_CONF}")"

    if [ -f "${REWRITE_CONF}" ]; then
        __print_separator_line
        info "Redefined variables"
        cat "${REWRITE_CONF}"
        echo ""
        __print_separator_line
    fi

    tablerow "Install type" "${INSTALL_TYPE}"
    if [ ! -z $__python_user_opt ]; then
        tablerow "Virtual environment path" "$(info "${HABANALABS_VIRTUAL_DIR}")"
    fi
    if [ "${INSTALL_TYPE}" != "base" ]; then
        tablerow "Python repo URL" "$(info "${HABANALABS_EXTRA_INDEX_URL}")"
    fi
    __prev_sw=$(get_list_current_installed_sw)
    if [[ $__prev_sw == "" ]]; then
        tablerow "Habanalabs software" "$(info "[N/A]")"
    else
        tablerow "Habanalabs software" "$(info "[OK]")"
        __list_of_hl_packages=( $__prev_sw )
        printf "%s\n" "${__list_of_hl_packages[@]}"
        if [[ "${INSTALL_TYPE}" == "base" || "${INSTALL_TYPE}" == "synapse" ]]; then
            warn "The existing Habanalabs software will be removed before installing the new version!"
        fi
    fi
    __disable_output_log_to_tty
}

function check_dependecies(){
    IFS=' ' read -ra packages <<< "$1"
    set +eE
    for package in "${packages[@]}"
    do
        case $OS_NAME in
            "ubuntu"|"debian")
                ( $__pkg_man__ | grep "$package" |  awk '{print $2}' | grep -E ^"$package" > /dev/null ) && ( tablerow "${package}" "$(info "[OK]")" ) || ( tablerow "${package}" "$(error "[MISSING]")" )
            ;;
            *)
                ( $__pkg_man__ | grep "$package" |  awk '{print $1}' | grep -E ^"$package" > /dev/null ) && ( tablerow "${package}" "$(info "[OK]")" ) || ( tablerow "${package}" "$(error "[MISSING]")" )
            ;;
        esac
    done
    set -eE
}

function check_previous_install(){
    check_dependecies "$HABANALABS_PRE_REQUIRED"
}

function __enable_application_log(){
    if [ "${__verbose_mode}" == "no"  ]; then
        exec 1> >($_SUDO_CMD tee -a "$HABANALABS_INSTALLER_LOG" >/dev/null)
    else
        exec 2> >($_SUDO_CMD tee -a "$HABANALABS_INSTALLER_LOG" >&2) > >($_SUDO_CMD tee -a "$HABANALABS_INSTALLER_LOG")
    fi
}

function __enable_output_log_to_tty(){
    if [ "${__verbose_mode}" == "no"  ]; then
        if sh -c ": >/dev/tty" >/dev/null 2>/dev/null; then
            exec > >($_SUDO_CMD tee -a "$HABANALABS_INSTALLER_LOG" >/dev/tty)
        fi
    fi
}

function __disable_output_log_to_tty(){
    if [ "${__verbose_mode}" == "no"  ]; then
        exec 1> >($_SUDO_CMD tee -a "$HABANALABS_INSTALLER_LOG" >/dev/null)
    fi
}

function __init_action(){
    if [ "${_SUDO_CMD}" != "" ]; then
        if ! command -v sudo >/dev/null 2>&1; then
            error "sudo command was not found. Please install the sudo package to fix the problem."
            exit 1;
        fi
    fi
    __create_log_dir
    touch $HABANALABS_SCRIPT_LOCK_FILE
    __enable_application_log
    date
}

function __on_finish_script(){
    __after_validate_msg

    $_SUDO_CMD rm -f $HABANALABS_SCRIPT_LOCK_FILE
    __SCRIPT_ENDTIME=$(date +%s)
    __SCRIPT_DIFFTIME=$(($__SCRIPT_ENDTIME-$__SCRIPT_STARTTIME))
    date
    info "Time duration: $(($__SCRIPT_DIFFTIME / 3600 )) hours $((($__SCRIPT_DIFFTIME % 3600) / 60)) minutes $(($__SCRIPT_DIFFTIME % 60)) seconds."
}

# show messages: INFO, WARN, FATAL, ERROR

function fatal(){
    local -r message="${1}"
    __enable_output_log_to_tty
    error "${message}"
    __disable_output_log_to_tty
    __on_finish_script
    exit 1
}

function tablerow(){
    # rows="%-35s  %-7s\n"
    local -r message="${1}"
    local -r value="${2}"
    printf "%-35s  %-7s\n" "$message" "$value"
}

function __print_separator_line(){
    printf -- '=%.0s' {1..80}; printf '\n'
}

function header(){
    local -r message="${1}"
    __enable_output_log_to_tty
    __print_separator_line
    info "${message}"
    __print_separator_line
    __disable_output_log_to_tty
}

function info(){
    local -r message="${1}"
    if [[ "$(is_empty_string "${message}")" = 'false' ]]
    then
        if [ -n "${COLOR_CONSOLE}" ]; then
            echo -e "\033[1;36m${message}\033[0m" 2>&1
        else
            echo -e "${message}" 2>&1
        fi
    fi
}
function warn(){
    local -r message="${1}"
    if [[ "$(is_empty_string "${message}")" = 'false' ]]
    then
        if [ -n "${COLOR_CONSOLE}" ]; then
            echo -e "\033[1;33m${message}\033[0m" 2>&1
        else
            echo -e "${message}" 2>&1
        fi
    fi
}
function error(){
    local -r message="${1}"
    if [[ "$(is_empty_string "${message}")" = 'false' ]]
    then
        if [ -n "${COLOR_CONSOLE}" ]; then
            echo -e "\033[1;31m${message}\033[0m" 2>&1
        else
            echo -e "${message}" 2>&1
        fi
    fi
}
function is_empty_string(){
    local -r string="${1}"
    if [[ "$(trim_string "${string}")" = '' ]]
    then
        echo 'true' && return 0
    fi
    echo 'false' && return 1
}
function trim_string(){
    local -r string="${1}"
    echo "$string" | xargs
    # sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

is_root ()
{
    return "$(id -u)"
}

has_sudo()
{
    local prompt
    if prompt=$(sudo -nv 2>&1); then
        echo "has_sudo__pass_set"
    elif grep -q '^sudo:' <<< "$prompt"; then
        echo "has_sudo__needs_pass"
    else
        echo "no_sudo"
    fi
}

function is_sudo_available_report(){
    if [[ $(is_sudo_available) -eq 0 ]] ; then
        #info "The required sudo privileges are ... [ok]"
        tablerow "The required sudo privileges are" "$(info "[ok]")"
    else
       #error "The required sudo privileges are ... [FAILED]"
        tablerow "The required sudo privileges are" "$(error "[FAILED]")"
        #fatal "Need root or sudo without password privilege to run this script"
    fi
}

function is_sudo_available(){
    if is_root || [[ "$(has_sudo)" == "has_sudo__pass_set" ]] ; then
        echo 0
    else
        echo 1
    fi

}

function __install_msg(){
    header "Install the packages and the basic dependencies"
    __enable_output_log_to_tty
    IFS=' ' read -ra packages <<< "$1"
    for package in "${packages[@]}"
    do
        info "${package}"
    done
    printf '\n'
    info "Set hugepage in /etc/sysctl.conf"
    printf '\n'
    __disable_output_log_to_tty
}

function __create_log_dir(){
    HABANA_INSTALLER_LOG_DIR=$(dirname "${HABANALABS_INSTALLER_LOG}")
    if [ ! -d "$HABANA_INSTALLER_LOG_DIR" ]; then
        mkdir -p "$HABANA_INSTALLER_LOG_DIR" || fatal "Failed to create log dir ${HABANA_INSTALLER_LOG_DIR}"
    fi
    rm -f "${HABANALABS_INSTALLER_LOG}"
}

function __generate_repo_files() {
    local nda=""
    local auth=""
    local repo_content=""
    local habanalabs_repo_file=""
    local repo_path=""
    local baseurl=""

    # Set NDA and AUTH if private access credentials are provided
    if [[ -n "${args[--private-access-name]}" && -n "${args[--private-access-token]}" ]]; then
        nda="-nda"
        auth="${args[--private-access-name]}:${args[--private-access-token]}@"
    fi

    # Initial repository content header
    repo_content="
#
# Habanalabs Ltd. public repository configuration file.
# For more information, refer to https://habana.ai/
#
[habanalabs_synapseai_${HABANA_RELEASE_VERSION}]
"
    # Determine the repository file and content based on the OS
    case "$OS_NAME" in
        "ubuntu"|"debian")
            habanalabs_repo_file="habanalabs_synapseai.list"
            repo_path="debian"
            repo_content="deb https://${auth}${HABANA_SERVER_NAME}/artifactory/${repo_path}${nda} ${OS_VERSION_CODENAME} main"
        ;;
        "amzn"|"rhel"|"tencentos"|"sles"|"centos"|"rocky")
            habanalabs_repo_file="habanalabs_synapseai.repo"
            if [[ "$OS_NAME" == "amzn" ]]; then
                repo_path="AmazonLinux2${nda}/aws/l2"
            else
                version_major_id="${VERSION_ID%%.*}"
                repo_path="${OS_NAME}${nda}/${version_major_id}/${VERSION_ID}"
            fi
            baseurl="https://${auth}${HABANA_SERVER_NAME}/artifactory/${repo_path}"

            # repo content
            repo_content="${repo_content}
name=Artifactory
baseurl=${baseurl}
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://${HABANA_SERVER_NAME}/artifactory/api/v2/repositories/$OS_NAME/keyPairs/primary/public
"
        ;;
        *)
            fatal "Error: Unknown OS_NAME: $OS_NAME"
        ;;
    esac

    if [[ -n "$nda" ]]; then
        # Verify if the credentials are correct
        check_credentials=$(curl -w "%{http_code}" -L -o /dev/null -s -u "${args[--private-access-name]}:${args[--private-access-token]}" "https://${HABANA_SERVER_NAME}/artifactory/${repo_path}/")
        if [[ "$check_credentials" != "200" ]]; then
            fatal "Error: Wrong private-access-name or bad private-access-token credentials."
        fi
    fi
    # Write the repo content to the appropriate file
    printf "%s\n" "${repo_content}" | $_SUDO_CMD tee "${_HABANALABS_REPO_DIR}/${habanalabs_repo_file}"
}

function __config_hugepage(){
    if [ -z $HL_CUSTOM_HUGEPAGE ]; then
        huge_pages_size=$(grep "^Hugepagesize:" /proc/meminfo | awk '{print $2}')
        huge_pages_memory=$((110 * 1024)) # convert to kB
        number_of_cores=$(lscpu | grep "^CPU(s):" | awk '{print $2}')
        total_huge_pages_memory=$((huge_pages_memory * number_of_cores * 2))
        number_of_huge_pages=$((total_huge_pages_memory / huge_pages_size + 1))
    else
        number_of_huge_pages=$HL_CUSTOM_HUGEPAGE
    fi
    $_SUDO_CMD sysctl -w vm.nr_hugepages=$number_of_huge_pages
    $_SUDO_CMD sed --in-place '/nr_hugepages/d' /etc/sysctl.conf
    header "Set hugepage /etc/sysctl.conf"
    echo "vm.nr_hugepages=$number_of_huge_pages" | $_SUDO_CMD tee -a /etc/sysctl.conf
}

function __start_driver(){
    $_SUDO_CMD dmesg -C
    header "Start driver"
    $_SUDO_CMD modprobe habanalabs_en
    # habanlabs_ib is not needed on G1 machines so no need to load it in such cases
    if ! [ $HL_DEVICE = 'gaudi' ]; then
        case $OS_NAME in
            ubuntu|debian|rhel|tencentos)
                $_SUDO_CMD modprobe habanalabs_ib
            ;;
        esac
    fi
    $_SUDO_CMD modprobe habanalabs_cn
    $_SUDO_CMD modprobe habanalabs
    $_SUDO_CMD dmesg -H
}

function __stop_driver(){
    $_SUDO_CMD dmesg -C
    header "Stop driver"
    $_SUDO_CMD modprobe -r habanalabs  || fatal "Unload module habanalabs failed"
    $_SUDO_CMD modprobe -r habanalabs_cn  || fatal "Unload module habanalabs_cn failed"
    if ! [ $HL_DEVICE = 'gaudi' ]; then
        case $OS_NAME in
            ubuntu|debian|rhel|tencentos)
                $_SUDO_CMD modprobe -r habanalabs_ib  || fatal "Unload module habanalabs_ib failed"
            ;;
        esac
    fi
    $_SUDO_CMD modprobe -r habanalabs_en  || fatal "Unload module habanalabs_en failed"
}

function __install_amazon_service(){
    header "Install Amazon service"
    $_SUDO_CMD dracut --omit-drivers habanalabs -f
    echo "blacklist habanalabs" | $_SUDO_CMD tee -a /etc/modprobe.d/habanalabs.conf
    echo "blacklist habanalabs" | $_SUDO_CMD tee -a /etc/dracut.conf.d/habanalabs.conf
    $_SUDO_CMD tee /lib/systemd/system/habanalabs.service <<EOF
[Unit]
Description=HabanaLabs AWS Helper Service
After=network.target
Before=docker.service

[Service]
Type=oneshot
ExecStart=/sbin/modprobe habanalabs
TimeoutStartSec=600s
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

    echo "systemctl enable habanalabs.service" | $_SUDO_CMD tee -a /etc/rc.local
    echo "systemctl start habanalabs.service" | $_SUDO_CMD tee -a /etc/rc.local
    $_SUDO_CMD chmod +x /etc/rc.d/rc.local
}

function __after_base_install_msg(){
    header "Habanalabs software was installed successfully"
}

function __after_validate_msg(){
    __footer_msg
    printf '\n'
}

function __footer_msg(){
    header "Full install log: ${HABANALABS_INSTALLER_LOG}"
}

function __detect_current_habana_sw(){
    set +ex
    local _graph_package_installed=0
    case $OS_NAME in
        "ubuntu"|"debian")
            _graph_package_installed=$(dpkg-query -W -f='${Status}' habanalabs-graph 2>/dev/null | grep -c "ok installed" || true)
        ;;
        "centos"|"amzn"|"rhel"|"tencentos"|"sles")
            _graph_package_installed=$(rpm -q habanalabs-graph 2>/dev/null | grep -c -v "not installed" || true)
        ;;
    esac
    if [ $_graph_package_installed -eq 1 ]; then
        info "Detected Habanalabs packages"
    else
        fatal "Error: Habanalabs packages were not detected.\n Please install SynapseAI software before installing frameworks and re-run the script."
    fi
    set -e
}

function __activate_venv(){
    if [ -z ${VIRTUAL_ENV} ]; then
        if [[ ! -d $HABANALABS_VIRTUAL_DIR ]]; then
            mkdir -p $HABANALABS_VIRTUAL_DIR
        fi
        if python${MIN_PYTHON_VER} -m venv $HABANALABS_VIRTUAL_DIR > /dev/null; then
            pushd $HABANALABS_VIRTUAL_DIR
            source ./bin/activate
            popd
        else
            error "Python venv activation failed."
        fi
    else
        pushd $VIRTUAL_ENV
        source ./bin/activate
        popd
    fi
}

function __detect_current_cmake(){
    local -r __action=${1:-infoonly}
    if [ `command -v "cmake"` ]; then
        local cmake_version=$(trim_string $(cmake --version | grep version |  grep -oE '[^ ]+$'))
        cmake_version=$(__normalize_semver "${cmake_version}")
        local __ver_less_that=$(__sh_version_lt "${MINIMAL_CMAKE_VERSION}" "${cmake_version}")
        local __ver_equal_that=$(__sh_version_eq "${MINIMAL_CMAKE_VERSION}" "${cmake_version}")
        if [ "$__ver_equal_that" -gt "0" ]; then
            if [ "$__ver_less_that" -gt "0" ]; then
                if [ "${__action}" == "upgrade" ]; then
                    __upgrade_cmake
                else
                    _BREAK_ON_ERROR="yes"
                    error "Cmake current version is ${cmake_version}. The minimal cmake version should be ${MINIMAL_CMAKE_VERSION}"
                fi
            fi
        fi
    else
        fatal "Cmake was not found."
    fi
}

function __upgrade_cmake(){
    local _mpi_temp_dir=$(mktemp -d)
    wget -q -O "${_mpi_temp_dir}/cmake-${LATEST_CMAKE_VERSION}-linux-x86_64.tar.gz" "https://github.com/Kitware/CMake/releases/download/v${LATEST_CMAKE_VERSION}/cmake-${LATEST_CMAKE_VERSION}-linux-x86_64.tar.gz" > /dev/null
    pushd ${_mpi_temp_dir} && tar xzf ./cmake-${LATEST_CMAKE_VERSION}-linux-x86_64.tar.gz
    $_SUDO_CMD mv cmake-${LATEST_CMAKE_VERSION}-linux-x86_64 /opt/cmake-${LATEST_CMAKE_VERSION}
    $_SUDO_CMD ln -sf /opt/cmake-${LATEST_CMAKE_VERSION}/bin/* /usr/bin/
    popd
    $_SUDO_CMD rm -rf ${_mpi_temp_dir}
}

function __info_openmpi(){
    if [[ ! -f ${OPENMPI_ROOT}/bin/mpirun ]]; then
        _BREAK_ON_ERROR="yes"
        warn "Open MPI version ${OPENMPI_VERSION} will be install"
    else
        info "The installed version is: ${OPENMPI_VERSION}"
    fi
}

function __install_openmpi(){
    local _mpi_temp_dir=$(mktemp -d)
    wget -q -O ${_mpi_temp_dir}/openmpi-${OPENMPI_VERSION}.tar.gz "${DEFAULT_OPENMPI_DOWNLOAD_URL}/openmpi-${OPENMPI_VERSION}.tar.gz"
    pushd ${_mpi_temp_dir} && tar xzf ${_mpi_temp_dir}/openmpi-${OPENMPI_VERSION}.tar.gz && popd
    pushd ${_mpi_temp_dir}/openmpi-${OPENMPI_VERSION}
    ./configure --prefix=${OPENMPI_ROOT}
    make -j `nproc --all`
    $_SUDO_CMD make install
    $_SUDO_CMD cp LICENSE ${OPENMPI_ROOT}
    popd
    rm -rf ${_mpi_temp_dir}
}

function __openmpi(){
    if [[ ! -f ${OPENMPI_ROOT}/bin/mpirun ]]; then
        __install_openmpi
    else
        info "Skip installing OpenMPI"
    fi
}

function __normalize_semver(){
    local __ver=${1}
    local _semver_count=$(grep -o "[.]" <<<"${__ver}" | wc -l)
    case $_semver_count in
        1)
            __ver="${__ver}.0"
        ;;
        3)
            __ver=$(echo "${__ver%.*}-${__ver##*.}")
        ;;
    esac
    echo $__ver
}

function __print_venv_post_message(){
    if [[ $__python_user_opt == "venv" ]]; then
        header "Attention!"
        __enable_output_log_to_tty
        info "All Python modules were installed in Python virtual environment."
        info "To activate a virtual environment, please perform the following:"
        info "1. Change the current working directory: cd ${HABANALABS_VIRTUAL_DIR}"
        info "2. Run: source ./bin/activate"
        __disable_output_log_to_tty
    fi
}

function __get_python_opt(){
    local __python_opt=""
    if [[ $__python_user_opt != "venv" && "$(id -u)" != "0" ]]; then
        __python_opt="--user"
    fi
    echo "${__python_opt}"
}

function __set_venv_or_skip(){
    if [[ $__python_user_opt == "venv" ]]; then
        __activate_venv
    fi
    export MPICC=${OPENMPI_ROOT}/bin/mpicc
    export MPI_ROOT=${OPENMPI_ROOT}
}

function __install_common_python(){
    local -r __python_opt="${1}"
    local -r __pip_version="${2}"
    local -r __setup_version="${3}"
    __set_venv_or_skip
    python${MIN_PYTHON_VER} -m pip install pip=="${__pip_version}" ${__python_opt} --disable-pip-version-check
    python${MIN_PYTHON_VER} -m pip install setuptools=="${__setup_version}" ${__python_opt} --disable-pip-version-check
    if [ -z $HABANALABS_LOCAL_DIR ]; then
        python${MIN_PYTHON_VER} -m pip install habana_media_loader=="${HABANA_RELEASE_VERSION}.${HABANA_RELEASE_ID}" ${__python_opt} ${__extra_index_url} --disable-pip-version-check
    else
        python${MIN_PYTHON_VER} -m pip install ${HABANALABS_LOCAL_DIR}/habana_media_loader-${HABANA_RELEASE_VERSION}.${HABANA_RELEASE_ID}-*.whl ${__python_opt} --disable-pip-version-check
    fi
}

function __libfabric(){
    if [[ ! -z $LIBFABRIC_ROOT && -f "${LIBFABRIC_ROOT}/lib/libfabric.so" ]]; then
        HABANALABS_LIBFABRIC_ROOT="${LIBFABRIC_ROOT}"
    else
        if [[ ! -f "${HABANALABS_LIBFABRIC_ROOT}/lib/libfabric.so" ]]; then
            __install_libfabric
        fi
    fi
    export LIBFABRIC_ROOT="${HABANALABS_LIBFABRIC_ROOT}"
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${LIBFABRIC_ROOT}/lib/
}

function __install_libfabric(){
    local __build_with_rdma_core=""
    local _mpi_temp_dir=$(mktemp -d)
    wget -q -O ${_mpi_temp_dir}/libfabric-${HABANALABS_LIBFABRIC_VERSION}.tar.bz2 "https://github.com/ofiwg/libfabric/releases/download/v${HABANALABS_LIBFABRIC_VERSION}/libfabric-${HABANALABS_LIBFABRIC_VERSION}.tar.bz2"
    pushd ${_mpi_temp_dir}
    tar xf ${_mpi_temp_dir}/libfabric-${HABANALABS_LIBFABRIC_VERSION}.tar.bz2
    popd
    pushd ${_mpi_temp_dir}/libfabric-${HABANALABS_LIBFABRIC_VERSION}
    ./configure --prefix=$HABANALABS_LIBFABRIC_ROOT --with-synapseai=/usr $__build_with_rdma_core
    make -j $(nproc --all)
    $_SUDO_CMD make install
    popd
    if [ -d ${HABANALABS_LIBFABRIC_ROOT}/lib64 ]; then
        if [ ! -e ${HABANALABS_LIBFABRIC_ROOT}/lib ]; then
            $_SUDO_CMD ln -sf ${HABANALABS_LIBFABRIC_ROOT}/lib64 ${HABANALABS_LIBFABRIC_ROOT}/lib
        fi
    fi
    rm -rf ${_mpi_temp_dir}
}

function __libofi_wrapper(){
    __install_libofi_wrapper
}

function __install_libofi_wrapper(){
    local _temp_dir=$(mktemp -d)
    wget -q -O ${_temp_dir}/main.zip "https://github.com/HabanaAI/hccl_ofi_wrapper/archive/refs/heads/main.zip"
    unzip ${_temp_dir}/main.zip -d "$_temp_dir"
    pushd ${_temp_dir}/hccl_ofi_wrapper-main
    make
    $_SUDO_CMD cp -f libhccl_ofi_wrapper.so /usr/lib/habanalabs/libhccl_ofi_wrapper.so
    popd
    rm -rf ${_temp_dir}
}

function __detect_installed_packages(){
    IFS=' ' read -ra packages <<< "$1"
    unset IFS
    for package in "${packages[@]}"
    do
        __detect_installed_package "${package}"
    done
}

function __detect_installed_package(){
    local -r _package_name="${1}"
    set +ex
    local _package_name_installed=0
    case $OS_NAME in
        "ubuntu"|"debian")
            _package_name_installed=$(dpkg-query -W -f='${Status}' ${_package_name} 2>/dev/null | grep -c "ok installed" || true)
        ;;
        "centos"|"amzn"|"rhel"|"tencentos"|"sles")
            _package_name_installed=$(rpm -q ${_package_name} 2>/dev/null | grep -c -v "not installed" || true)
        ;;
    esac
    if [ $_package_name_installed -eq 1 ]; then
        tablerow "${_package_name}" "$(info "[OK]")"
    else
        tablerow "${_package_name}" "$(error "[MISSING]")"
        _BREAK_ON_ERROR="yes"
    fi
    set -e
}

function __detect_python_dependencies(){
    local _NO_DOT_PYTHONVER=$(echo $MIN_PYTHON_VER | sed -e "s/\.//g")
    case $OS_NAME in
        "ubuntu")
            __detect_installed_packages "python${MIN_PYTHON_VER}-dev python3-pip python${MIN_PYTHON_VER}-venv"
        ;;
        "rhel")
            case $OS_VERSION in
                "9.4")
                    __detect_installed_packages "python${MIN_PYTHON_VER}-devel python${MIN_PYTHON_VER}-pip python${MIN_PYTHON_VER}-tkinter sqlite-devel readline-devel xz-devel"
                ;;
            esac
        ;;
        "centos"|"amzn")
            __detect_installed_packages "python${_NO_DOT_PYTHONVER}-devel python3-pip"
        ;;
        "sles")
            __detect_installed_packages "python${_NO_DOT_PYTHONVER}-devel"
        ;;
    esac
}

function __check_on_break(){
    if [[ "${_BREAK_ON_ERROR}" == "yes" ]]; then
        fatal "$(__print_separator_line)\nOne or more dependencies were not detected.\nTo resolve issue please run:\n\n./habanalabs-installer.sh install --type dependencies\n\nand re-run the script."
    fi
}

function __setup_framework_env(){
    if [ ! -f "${HABANALABS_PROFILE_FILE}" ]; then
        ${_SUDO_CMD} touch "${HABANALABS_PROFILE_FILE}"
    fi
    # ${_SUDO_CMD} sed -i '/#>>>> Common Habana starts/,/#<<<< Common Habana ends/d' ${HABANALABS_PROFILE_FILE}
    # echo "#>>>> Common Habana starts" | ${_SUDO_CMD} tee -a ${HABANALABS_PROFILE_FILE}
    echo "export MPI_ROOT=${OPENMPI_ROOT}" | ${_SUDO_CMD} tee -a ${HABANALABS_PROFILE_FILE}
    echo "export OPAL_PREFIX=${OPENMPI_ROOT}" | ${_SUDO_CMD} tee -a ${HABANALABS_PROFILE_FILE}
    echo 'export LD_LIBRARY_PATH=${MPI_ROOT}/lib:${LD_LIBRARY_PATH}' | ${_SUDO_CMD} tee -a ${HABANALABS_PROFILE_FILE}
    echo 'export PATH=${MPI_ROOT}/bin:${PATH}' | ${_SUDO_CMD} tee -a ${HABANALABS_PROFILE_FILE}
    # echo "#<<<< Common Habana ends" | ${_SUDO_CMD} tee -a ${HABANALABS_PROFILE_FILE}
    if [[ $OS_NAME != @("ubuntu"|"sles") ]]; then
        # For AML/CentOS/RHEL ca-cert file is expected exactly under /etc/ssl/certs/ca-certificates.crt
        # otherwise curl will fail during access to S3 AWS storage
        if [[ ! -e /etc/ssl/certs/ca-certificates.crt ]]; then
            ${_SUDO_CMD} ln -s /etc/ssl/certs/ca-bundle.crt /etc/ssl/certs/ca-certificates.crt
        fi
    fi
}

function __force_install(){
  local -r question="${1}"
  local -r break_msg="${2}"
  FORCE_INSTALL=""
  if [ -n "${args[--force]}" ]; then
    FORCE_INSTALL="-y"
  else
    read -p "${question}" -r answer
    answer=${answer:-n}
    if [[ "$answer" == [Yy] ]]; then
      FORCE_INSTALL="-y"
    else
      fatal "${break_msg}"
    fi
  fi
}

function __pre_install(){
    _BREAK_ON_ERROR="no"
    local -r __install_type="${1}"
    case $__install_type in
    "base"|"synapse")
        check_hold_packages
        # __check_mlnxofed_install
        __install_msg "${_DEPENDENCIES} ${BASIC_SCRIPT_DEPENDENCIES} ${HABANALABS_PRE_REQUIRED} ${HABANALABS_DRIVER} ${HABANALABS_REQUIRED} ${HABANALABS_OPTIONAL} ${HABANALABS_MLNX_DEPENDENCIES}"
    ;;
    "k8s")
        check_hold_packages
        # __check_mlnxofed_install
        __install_msg "${_DEPENDENCIES} ${BASIC_SCRIPT_DEPENDENCIES} ${HABANALABS_PRE_REQUIRED} ${HABANALABS_K8S_DEPENDENCIES} ${HABANALABS_DRIVER} ${HABANALABS_K8S_OPTIONAL} ${HABANALABS_MLNX_DEPENDENCIES}"
    ;;
    "pt"|"pytorch")
        header "Check PyTorch packages and dependencies"
        __enable_output_log_to_tty
        __detect_current_cmake
        __info_openmpi
        __detect_installed_python
        __detect_installed_packages "${HABANALABS_PT_DEPENDENCIES}"
        __detect_python_dependencies
        __detect_current_habana_sw
        __check_on_break
        __disable_output_log_to_tty
    ;;
    "deps"|"dependencies")
        __enable_output_log_to_tty
        __info_openmpi
        __detect_python_dependencies
        __detect_installed_packages "$(echo "${BASIC_SCRIPT_DEPENDENCIES} ${HABANALABS_PT_DEPENDENCIES} ${HABANALABS_SRC_DEPENDENCIES}" | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"
        __disable_output_log_to_tty
    ;;
    *)
        fatal "Break install: the installation type is wrong. For help, run habanalabs-installer.sh install --help"
    ;;
    esac
}

function __check_installed_package(){
    local -r _package_name="${1}"
    local _package_name_installed=0
    case $OS_NAME in
        "ubuntu"|"debian")
            _package_name_installed=$(dpkg-query -W -f='${Status}' ${_package_name} 2>/dev/null | grep -c "ok installed" || true)
        ;;
        "centos"|"amzn"|"rhel"|"tencentos"|"sles")
            _package_name_installed=$(rpm -q ${_package_name} 2>/dev/null | grep -c -v "not installed" || true)
        ;;
    esac
    echo $_package_name_installed
}

function __prepaire_install(){
    local -r __install_type="${1}"
    case $__install_type in
        "base"|"synapse")
            header "Prepaire installation"
            local __pp_prefix=""
            case $OS_NAME in
                "ubuntu"|"debian")
                    __pp_prefix="-dev"
                ;;
            esac
            local -r __list_of_preinstalled_packages=(curl gpg wget pciutils libibverbs${__pp_prefix} file)
            local __pp_FORCE_INSTALL="${FORCE_INSTALL}"
            FORCE_INSTALL="-y"
            update_cache >/dev/null 2>&1
            for pp_name in "${__list_of_preinstalled_packages[@]}"; do
                if [[ $(__check_installed_package "${pp_name}") -ne 1 ]]; then
                    installPackages "${pp_name}" >/dev/null 2>&1
                fi
            done
            FORCE_INSTALL="${__pp_FORCE_INSTALL}"
        ;;
    esac

}

function __install(){
    local -r __install_type="${1}"
    case $__install_type in
        "repo-only")
            header "Install Habanalabs repo"
            installSUSERepo
            installRepo
        ;;
        "base"|"synapse")
            header "Check device"
            if [ "$(check_devices)" -gt "0" ]; then
                error "Device ${HL_DEVICE} is busy."
                fatal "Please stop all running processes on device and restart habanalabs-installer."
            else
                info "PASS"
            fi
            header "Install Habanalabs repo"
            installSUSERepo
            installRepo
            header "Install dependencies"
            $_SUDO_CMD $__install_epel__
            __patch_on_upgrade_packages
            installPackages "${_DEPENDENCIES} ${BASIC_SCRIPT_DEPENDENCIES} ${HABANALABS_BASE_DEPENDENCIES}"
            __post_depend_install
            __mlnxofed_install
            # install habanalabs packages
            if [ -z "${args[--skip-install-firmware]}" ]; then
                header "Install the firmware"
                installPackages "${HABANALABS_PRE_REQUIRED}"
            fi
            header "Install the driver"
            installPackages "${HABANALABS_DRIVER}"
            header "Install the basic packages"
            installPackages "${HABANALABS_REQUIRED}"
            header "Install the optional packages"
            installPackages "${HABANALABS_OPTIONAL}"
            __stop_driver
            # validate
            header "Validate the firmware package"
            __validate "Firmware files" "/lib/firmware/habanalabs/gaudi/gaudi-boot-fit.itb"
            validate_driver_after_install
            header "Validate the basic package"
            __validate "HL-Thunk library" "/usr/lib/habanalabs/libhl-thunk.so"
            __validate "Graph compiler library" "/usr/lib/habanalabs/libSynapse.so"
            __config_hugepage
            # set amazon hack
            case $OS_NAME in
                "amzn")
                    __install_amazon_service
                ;;
            esac
            if [ -z "${args[--skip-driver-load]}" ]; then
                __start_driver
            else
                tablerow "Load driver" "SKIP"
            fi
            __after_base_install_msg
        ;;
        "k8s")
            if [ -z "${args[--skip-habanalabs-repo]}" ]; then
                header "Install Habanalabs repo"
                installRepo
            fi
            header "Install dependencies"
            $_SUDO_CMD $__install_epel__
            update_cache
            installPackages "${_DEPENDENCIES} ${BASIC_SCRIPT_DEPENDENCIES} ${HABANALABS_K8S_DEPENDENCIES} ${HABANALABS_BASE_DEPENDENCIES}"
            __post_depend_install
            __mlnxofed_install
            if [ -z "${args[--skip-install-firmware]}" ]; then
                header "Install the firmware"
                installPackages "${HABANALABS_PRE_REQUIRED}"
            fi
            header "Install the driver"
            installPackages "${HABANALABS_DRIVER}"
            header "Install the optional packages"
            installPackages "${HABANALABS_K8S_OPTIONAL}"
            __stop_driver
            __config_hugepage
            # set amazon hack
            case $OS_NAME in
                "amzn")
                    __install_amazon_service
                ;;
            esac
            if [ -z "${args[--skip-driver-load]}" ]; then
                __start_driver
            else
                tablerow "Load driver" "SKIP"
            fi
            __after_base_install_msg
        ;;
        "deps"|"dependencies")
            header "Install the framework dependencies packages"
            update_cache
            fix_install_python_modules
            installPackages "${BASIC_SCRIPT_DEPENDENCIES} ${HABANALABS_PT_DEPENDENCIES} ${HABANALABS_SRC_DEPENDENCIES}"
            __detect_current_cmake "upgrade"
            __install_python_dependencies
            __libfabric
            __openmpi
            __libofi_wrapper
            __setup_framework_env
        ;;
        "pt"|"pytorch")
            header "Install Habanalabs PyTorch python modules"
            __install_pt_python_packages
            header "Set up Habanalabs PyTorch environment"
            __setup_pt_envs
            header "Validate Habanalabs PyTorch installation"
            __validate_pt_packages
            __print_venv_post_message
        ;;
        *)
            fatal "Break install: installation type wrong. For help: habanalabs-installer.sh install --help"
        ;;
    esac
}

function check_device_status(){
    local -r __device_num="${1}"
    if $_SUDO_CMD cat "/sys/kernel/debug/accel/${__device_num}/vm" | grep -q "ctx asid: 1"; then
        echo 1
    else
        echo 0
    fi
}
function check_device_busy(){
    local -r __device_num="${1}"
    local __device_status=0
    if $_SUDO_CMD test -f "/sys/kernel/debug/accel/${__device_num}/vm" ; then
        for (( attemp=0; attemp<3; attemp++ ))
        do
            __device_status=$(expr $__device_status + $(check_device_status "${__device_num}"))
            sleep .$[ ( $RANDOM % 5 ) + 1 ]s
        done
    fi
    echo $__device_status
}

function get_device_number(){
    echo $(lspci -d 1da3: | wc -l)
}

function check_devices(){
    local __devices_status=0
    local -r devices_num=$(get_device_number)
    for (( c=0; c<$devices_num; c++ ))
    do
        __devices_status=$(( $__devices_status + $(check_device_busy "${c}") ))
    done
    echo $__devices_status
}

function update_cache(){
    case $OS_NAME in
        "ubuntu"|"debian")
            $_SUDO_CMD "${__pkg__}" update 2>/dev/null
        ;;
        "sles")
            $_SUDO_CMD zypper --non-interactive --gpg-auto-import-keys refresh 2>/dev/null
        ;;
        *)
            $_SUDO_CMD "${__pkg__}" makecache -y 2>/dev/null
        ;;
    esac
}

function installSUSERepo(){
    case $OS_NAME in
        "sles")
            if [ -f /etc/zypp/repos.d/OpenSUSI.repo ]; then
                warn "found existing repo conf file /etc/zypp/repos.d/OpenSUSI.repo, replacing it with new version"
                $_SUDO_CMD mv /etc/zypp/repos.d/OpenSUSI.repo /etc/zypp/repos.d/OpenSUSI.repo.save
            fi
            $_SUDO_CMD ${__pkg__} addrepo -f http://download.opensuse.org/distribution/leap/15.5/repo/oss/ OpenSUSI
            echo 'gpgcheck=0' | $_SUDO_CMD tee -a /etc/zypp/repos.d/OpenSUSI.repo
            echo 'repo_gpgcheck=0' | $_SUDO_CMD tee -a /etc/zypp/repos.d/OpenSUSI.repo
        ;;
        "rhel")
            case $OS_VERSION in
                "9.4"|"9.2")
                    echo '[Habanalabs-CRB]' | $_SUDO_CMD tee -a /etc/yum.repos.d/habanalabs-crb.repo
                    echo 'name=Habanalabs-CRB' | $_SUDO_CMD tee -a /etc/yum.repos.d/habanalabs-crb.repo
                    echo 'baseurl=https://raw.repo.almalinux.org/almalinux/9/CRB/x86_64/os' | $_SUDO_CMD tee -a /etc/yum.repos.d/habanalabs-crb.repo
                    echo 'enabled=1' | $_SUDO_CMD tee -a /etc/yum.repos.d/habanalabs-crb.repo
                    echo 'gpgcheck=0' | $_SUDO_CMD tee -a /etc/yum.repos.d/habanalabs-crb.repo
                    echo 'repo_gpgcheck=0' | $_SUDO_CMD tee -a /etc/yum.repos.d/habanalabs-crb.repo
                ;;
            esac
        ;;
    esac
}

function installPackages(){
    # local -r packages=($1)
    local __cmd=""
    IFS=' ' read -ra packages <<< "$1"
    for package in "${packages[@]}"
    do
        version_for_package=""
        need_validate="false"
        if [[ "$package" == *"habana"* ]]; then
            need_validate="true"
            __deb_separator="-"
            if [[ $OS_NAME == "debian" && "$package" == *"dkms"* ]]; then
                __deb_separator="."
            fi
            version_for_package="${__separator__}${HABANA_RELEASE_VERSION}${__deb_separator}${HABANA_RELEASE_ID}${__suffix__}"
        fi

	if [[ $OS_NAME == "rhel" && "$package" == *"dkms"* ]]; then
		__cmd="$_SUDO_CMD ${__pkg__} download ${package}${version_for_package} 2>&1; $_SUDO_CMD rpm -ivh ./${package}${version_for_package}*.rpm --nodeps; $_SUDO_CMD rm ./${package}${version_for_package}*.rpm"
	else
	    __cmd="$_SUDO_CMD ${__pkg__} install ${FORCE_INSTALL} ${HABANALABS_PKG_INSTALL_OPTION} ${OVERWRITE_CONF_FILES} ${package}${version_for_package} 2>&1"
	fi
        ( eval $__cmd ) || fatal "ERROR: Install package ${package} failed."
        if [[ "${need_validate}" == "true" ]]; then
            case $OS_NAME in
                "centos"|"amzn"|"rhel"|"tencentos")
                    if ! rpm -V $package ; then
                        fatal "ERROR: Install package ${package} failed."
                    fi
                ;;
                "ubuntu"|"debian")
                    __package_is_valid=$(dpkg -s $package 2>&1 | grep -i status: | grep -iq "install ok installed" && echo "true" || echo "false")
                    if [[ "${__package_is_valid}" == "false" ]]; then
                        fatal "ERROR: Install package ${package} failed."
                    fi
                ;;
            esac
        fi
    done

    if ! command -v ldconfig >/dev/null 2>&1; then
        PATH=$PATH:/usr/sbin
    fi
    $_SUDO_CMD ldconfig || true
}

function installRepo() {
    if [ -f ${_HABANALABS_REPO_DIR}/${HABANALABS_REPO_FILE} ]; then
        # new version will have new repo conf files, we want to overide with new conf filet
        warn "found existing repo conf file ${_HABANALABS_REPO_DIR}/${HABANALABS_REPO_FILE}, replacing it with new version"
        $_SUDO_CMD /bin/mv -f ${_HABANALABS_REPO_DIR}/${HABANALABS_REPO_FILE} ${_HABANALABS_REPO_DIR}/${HABANALABS_REPO_FILE}.save
    fi

    if [[ "$GENERATE_REPOS" != "TRUE" ]]; then
        $_SUDO_CMD wget -q -O ${_HABANALABS_REPO_DIR}/${HABANALABS_REPO_FILE} "https://${HABANA_SERVER_NAME}/${HABANALABS_REPO_PATH}/${HABANA_RELEASE_VERSION}/${OS_NAME}${OS_VERSION}/${HABANALABS_REPO_FILE}" > /dev/null
    else
        __generate_repo_files
    fi

    case $OS_NAME in
        "ubuntu"|"debian")
            export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1
            $_SUDO_CMD apt update && $_SUDO_CMD apt install -y gpg
            curl -fsSL https://${HABANA_SERVER_NAME}/artifactory/api/gpg/key/public | gpg --dearmor | $_SUDO_CMD tee /etc/apt/trusted.gpg.d/habanalabs.gpg > /dev/null
        ;;
    esac
    update_cache
}

function __install_python_from_source(){
    local -r __python_ver="${1}"
    local -r __openssl_ver="${2:-}"
    $_SUDO_CMD wget -q -O /opt/Python-${__python_ver}.tgz https://www.python.org/ftp/python/${__python_ver}/Python-${__python_ver}.tgz > /dev/null
    cd /opt/
    $_SUDO_CMD tar xzf Python-${__python_ver}.tgz
    $_SUDO_CMD rm -f Python-${__python_ver}.tgz
    cd Python-${__python_ver}
    $_SUDO_CMD ./configure --enable-optimizations --enable-loadable-sqlite-extensions --enable-shared $__openssl_ver
    $_SUDO_CMD make
    $_SUDO_CMD make altinstall
    echo "/usr/local/lib" | $_SUDO_CMD tee -a /etc/ld.so.conf.d/Python-${__python_ver}.conf
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
    if ! command -v ldconfig >/dev/null 2>&1; then
        PATH=$PATH:/usr/sbin
    fi
    $_SUDO_CMD ldconfig || true
}

function __install_openssl_from_source(){
    local -r __openssl_ver="${1}"
    local -r __openssl_url_ver=$(echo "${__openssl_ver}" | sed "s/\./_/g")
    header "Install Openssl ${__openssl_ver} from source"
    $_SUDO_CMD wget -nv -O "/tmp/openssl-${__openssl_ver}.tar.gz" "https://github.com/openssl/openssl/releases/download/OpenSSL_${__openssl_url_ver}/openssl-${__openssl_ver}.tar.gz"
    pushd /tmp/
    $_SUDO_CMD tar xzf openssl-$__openssl_ver.tar.gz
    popd
    pushd /tmp/openssl-$__openssl_ver
    $_SUDO_CMD ./config --prefix=/opt/openssl-$__openssl_ver shared zlib
    $_SUDO_CMD make
    $_SUDO_CMD make install
    popd
    $_SUDO_CMD rm -rf /tmp/openssl-$__openssl_ver
    $_SUDO_CMD rm -rf /tmp/openssl-$__openssl_ver.tar.gz
    export LD_LIBRARY_PATH=/opt/openssl-$__openssl_ver/lib:$LD_LIBRARY_PATH
    export PATH=/opt/openssl-$__openssl_ver/bin:$PATH
}

function __post_depend_install(){
    case $OS_NAME in
        "debian")
            $_SUDO_CMD ln -sf /usr/include/libdrm /usr/include/drm
        ;;
    esac
}

function __mlnxofed_install(){
    case $OS_NAME in
        "tencentos")
            if modinfo ib_core 2> /dev/null | grep -q mlx; then
                if [[ ! -d /usr/src/ofa_kernel/$(uname -i)/$(uname -r)/include/rdma ]]; then
                    # install deps
                    header "Install OFED"
                    local __default_python_path=$(trim_string $(realpath /usr/bin/python3))
                    installPackages "${HABANALABS_MLNX_DEPENDENCIES}"
                    $_SUDO_CMD ln -sf ${__default_python_path} /etc/alternatives/python3
                    local _ofa_kernel_dir=$(mktemp -d)
                    wget -q -O "${_ofa_kernel_dir}/${HABANALABS_MLNX_OFED_VERSION}" "https://${HABANA_SERVER_NAME}/${HABANALABS_MLNX_REPO_PATH}/${HABANALABS_MLNX_OFED_VERSION}"
                    tar xvzf "${_ofa_kernel_dir}/${HABANALABS_MLNX_OFED_VERSION}" -C ${_ofa_kernel_dir}
                    pushd "${_ofa_kernel_dir}/mlnx-ofed"
                        $_SUDO_CMD ./mlnxofedinstall --distro RHEL8.4 --skip-distro-check --add-kernel-support || fatal "Installation of mlnx ofed driver failed\nPlease check pre-requirements and rerun habanalabs-installer.sh"
                    popd
                    $_SUDO_CMD rm -rf "${_ofa_kernel_dir}"
                    $_SUDO_CMD dracut -f || true
                    $_SUDO_CMD /etc/init.d/openibd restart || true
                    $_SUDO_CMD dnf remove openmpi -y || true
                fi
            fi
        ;;
    esac
}

# init

function fix_install_python_modules(){
    # Ubuntu 24 block the installation of python modules
    case $OS_NAME in
        "ubuntu")
            case $OS_VERSION in
                "24.04")
                    if [ -f /usr/lib/python3.12/EXTERNALLY-MANAGED ]; then
                        $_SUDO_CMD mv /usr/lib/python3.12/EXTERNALLY-MANAGED /usr/lib/python3.12/EXTERNALLY-MANAGED.old
                    fi
                ;;
            esac
        ;;
    esac
}

function __install_pt_python_packages(){
    local __python_opt=$(__get_python_opt)
    local __os_ver=$OS_NAME
    if [ "${OS_NAME}" == "sles" ]; then
        __os_ver="suse"
    fi
    __install_common_python "${__python_opt}" "${HABANALABS_PT_PIP_VERSION}" "${HABANALABS_PT_SETUPTOOLS_VERSION}"
    local _pt_temp_dir=$(mktemp -d)
    local __os_version=$(echo "${OS_VERSION}" | sed "s/\.//")
    local __remote_pt_url_dir="https://${HABANA_SERVER_NAME}/${HABANALABS_SERVER_PT_DIR}/${HABANA_RELEASE_VERSION}/${HABANA_RELEASE_ID}/pytorch/${__os_ver}${__os_version}"
    local __pt_module=""
    if [ -z $HABANALABS_LOCAL_DIR ]; then
        __pt_module=$(wget -q ${__remote_pt_url_dir} -O - | grep -o  "pytorch_modules-v${HABANALABS_PT_VERSION}.*${HABANA_RELEASE_VERSION}_${HABANA_RELEASE_ID}.tgz" | awk '{print $1}' FS='">')
        if [ -z "${__pt_module}" ]; then
            fatal "pytorch_modules*${HABANA_RELEASE_VERSION}_${HABANA_RELEASE_ID}.tgz tar file was not found."
        fi
        wget -q -O ${_pt_temp_dir}/${__pt_module} ${__remote_pt_url_dir}/${__pt_module} > /dev/null
        if [ $? -ne 0 ]; then
            fatal "Unable to download Habana PyTorch whl packages."
        fi
    else
        __pt_module=$(basename ${HABANALABS_LOCAL_DIR}/pytorch_modules-v2*${HABANA_RELEASE_VERSION}_${HABANA_RELEASE_ID}.tgz)
        cp ${HABANALABS_LOCAL_DIR}/${__pt_module} ${_pt_temp_dir}/
    fi
    pushd ${_pt_temp_dir}
    tar -xvf ./${__pt_module}
    PYTHON_VERSION="${MIN_PYTHON_VER}" PYTHON_OPTIONS="${__python_opt}" PYTHON_INDEX_URL="${__extra_index_url}" HABANALABS_LOCAL_DIR="${HABANALABS_LOCAL_DIR}" ./install.sh $HABANA_RELEASE_VERSION $HABANA_RELEASE_ID
    popd
    rm -rf ${_pt_temp_dir}
}

#    set env required for pytorch
function __setup_pt_envs(){
    if [ ! -f "${HABANALABS_PROFILE_FILE}" ]; then
        touch "${HABANALABS_PROFILE_FILE}"
    fi
    if [ ! -d "${HOME}/.habana_logs" ]; then
        mkdir -p "${HOME}/.habana_logs"
    fi
    sed -i '/#>>>> PT Habana starts/,/#<<<< PT Habana ends/d' ${HABANALABS_PROFILE_FILE}
    echo "#>>>> PT Habana starts" | tee -a ${HABANALABS_PROFILE_FILE}
    echo 'export TCMALLOC_LARGE_ALLOC_REPORT_THRESHOLD=7516192768' | tee -a ${HABANALABS_PROFILE_FILE}
    if ! command -v ldconfig >/dev/null 2>&1; then
        PATH=$PATH:/usr/sbin
    fi
    local __tcmalloc_path=$(ldconfig -p | grep libtcmalloc.so | tail -1 | awk '{ print $2 }' FS=' => ')
    if [ "z$__tcmalloc_path" != "z" ]; then
        echo "export LD_PRELOAD=${__tcmalloc_path}" | tee -a ${HABANALABS_PROFILE_FILE}
    fi
    echo "#<<<< PT Habana ends" | tee -a ${HABANALABS_PROFILE_FILE}
    if [ ! -f "$HOME/.bashrc" ]; then
        touch "$HOME/.bashrc"
    fi
    sed --in-place '/habanalabsrc/d' $HOME/.bashrc
    echo 'source $HOME/.habanalabsrc' | tee -a "${HOME}/.bashrc"
}

function check_hold_packages(){
    case $OS_DISTRIBUTION_TYPE in
        debian)
            if command -v "apt-mark" &>/dev/null; then
                holded=$($_SUDO_CMD apt-mark showhold | grep habana | wc -l)
                if [[ "$holded" -gt "0" ]]; then
                    error "One or more habanalabs packages was holded."
                    fatal "Please unhold habanalabs packages and rerun installer script"
                fi
            fi
        ;;
    esac
}

function __uninstall_patch_packages(){
    case $OS_NAME in
        "ubuntu"|"debian")
            case $OS_VERSION in
                "22.04")
                    if [ -f /var/lib/dpkg/info/habanalabs-dkms.prerm ]; then
                        if grep -q "1.14.0" /var/lib/dpkg/info/habanalabs-dkms.prerm; then
                            $_SUDO_CMD sed -i '7d' /var/lib/dpkg/info/habanalabs-dkms.prerm
                            $_SUDO_CMD sed -i "6i for v in \$(dkms status | grep \${PACKAGE} | tr ',' ' ' | awk '{print \$1}' | tr '/\' ' '  | awk '{print \$2}'); do"  /var/lib/dpkg/info/habanalabs-dkms.prerm
                        fi
                    fi
                ;;
            esac
        ;;
    esac
}

function uninstall_base_packages(){
    case $OS_DISTRIBUTION_TYPE in
        debian)
            __uninstall_patch_packages
            $_SUDO_CMD ${__pkg_man__} | grep habana && $_SUDO_CMD ${__pkg__} purge -y $($_SUDO_CMD ${__pkg_man__} | grep habana | awk '{print $2}')
        ;;
        redhat)
            $_SUDO_CMD ${__pkg_man__} | grep habana && $_SUDO_CMD ${__pkg__} remove -y $($_SUDO_CMD ${__pkg_man__} | grep habana)
        ;;
    esac

    $_SUDO_CMD rm -rf /usr/lib/habanalabs
    $_SUDO_CMD rm -rf /usr/include/habanalabs
    $_SUDO_CMD rm -rf /opt/habanalabs
    if [ -f /etc/dracut.conf.d/habanalabs.conf ]; then
        $_SUDO_CMD rm -rf /etc/dracut.conf.d/habanalabs.conf
    fi
    if [ -f /lib/systemd/system/habanalabs.service ]; then
        $_SUDO_CMD rm -rf /etc/modprobe.d/habanalabs.conf
    fi
    if [ -f /lib/systemd/system/habanalabs.service ]; then
        $_SUDO_CMD rm -rf /lib/systemd/system/habanalabs.service
    fi
    if [ -f /etc/rc.local ]; then
        $_SUDO_CMD sed --in-place '/habanalabs/d' /etc/rc.local
    fi
    if [ -f /etc/rc.d/rc.local ]; then
        $_SUDO_CMD sed --in-place '/habanalabs/d' /etc/rc.d/rc.local
    fi
    if [ -f ${_HABANALABS_REPO_DIR}/${HABANALABS_REPO_FILE} ]; then
        $_SUDO_CMD rm -rf ${_HABANALABS_REPO_DIR}/${HABANALABS_REPO_FILE}
    fi
}

function pre_uninstall_base_packages(){
    local -r __list_of_hl_packages=( $(get_list_current_installed_sw) )
    printf "%s\n" "${__list_of_hl_packages[@]}"
}

function get_list_current_installed_sw(){
    local __ret=""
    case $OS_DISTRIBUTION_TYPE in
        debian)
            __ret=$($_SUDO_CMD ${__pkg_man__} | grep habana | awk '{print $2"="$3}' || true)
        ;;
        redhat|sles)
            __ret=$($_SUDO_CMD ${__pkg_man__} | grep habana || true)
        ;;
    esac
    echo $__ret
}

function __patch_on_upgrade_packages(){
    case $OS_DISTRIBUTION_TYPE in
        debian)
            if [ -f /var/lib/dpkg/info/habanalabs-dkms.list ]; then
                $_SUDO_CMD sed --in-place '/^\/lib/d' /var/lib/dpkg/info/habanalabs-dkms.list || true
            fi
            if [ -f /var/lib/dpkg/info/habanalabs-dkms.md5sums ]; then
                $_SUDO_CMD sed --in-place '/lib\/firmware\/habanalabs\/gaudi/d' /var/lib/dpkg/info/habanalabs-dkms.md5sums || true
            fi
        ;;
    esac
}

function assert() {
    # 2 arguments test
    if [ $# -eq 2 ]; then
        if expr "$1" : "^-[zndfserwx]$" > /dev/null; then
            # shellcheck disable=SC1072
            case ${1} in
                -z)
                    if [ -z "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -n)
                    if [ -n "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -d)
                    if [ -d "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -f)
                    if [ -f "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -s)
                    if [ -s "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -e)
                    if [ -e "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -r)
                    if [ -r "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -w)
                    if [ -w "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
                -x)
                    if [ -x "$2" ]; then
                        info "OK"
                        return 0
                    fi
                ;;
            esac

            # if [ "$1" "$2" ]; then
            #     info "OK"
            #     return 0
            # fi
            error "ERR $1 $2"
            return 1
        fi

        # string test
        if [ "$1" = "$2" ]; then
            info "OK"
            return 0
        else
            error "ERR $1 $2"
            return 1
        fi
    fi

    # regexp test
    if [ "${2}" = 'match' ]; then
        local regexp
        regexp="${3}"
        if [[ "${1}" =~ $regexp ]]; then
            info "OK"
            return 0
        fi
        error "ERR $1 $2 $3"
        return 1
    fi

    # file contents equal test
    if [ "${2}" = 'cmp' ]; then
        # eval cmp -s "${1}" "${3}"
        if cmp -s "${1}" "${3}"; then
            info "OK"
            return 0
        fi
        error "ERR $1 $2 $3"
        return 1
    fi

    # file contents not equal test
    if [ "${2}" = '!cmp' ]; then
        # eval cmp -s "${1}" "${3}"
        if ! cmp -s "${1}" "${3}"; then
            info "OK"
            return 0
        fi
        error "ERR $1 $2 $3"
        return 1
    fi

    # other test
    # if [ "$1" "$2" "$3" ]; then
    #     info "OK"
    #     return 0
    # fi
    error "ERR $1 $2 $3"
    return 1
}

function validate_driver_after_install() {
    header "Validate driver package"
    case $OS_NAME in
        "ubuntu"|"debian")
            case $OS_VERSION in
                "24.04")
                    __validate "Habanalabs net driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs_en.ko.zst"
                    __validate "Habanalabs ib driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs_ib.ko.zst"
                    __validate "Habanalabs cn driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs_cn.ko.zst"
                    __validate "Habanalabs driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs.ko.zst"
                ;;
                *)
                    __validate "Habanalabs net driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs_en.ko"
                    __validate "Habanalabs ib driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs_ib.ko"
                    __validate "Habanalabs cn driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs_cn.ko"
                    __validate "Habanalabs driver" "/lib/modules/$(uname -r)/updates/dkms/habanalabs.ko"
                ;;
            esac
        ;;
        "amzn" | "centos")
            __validate "Habanalabs net driver" "/lib/modules/$(uname -r)/extra/habanalabs_en.ko"
            __validate "Habanalabs cn driver" "/lib/modules/$(uname -r)/extra/habanalabs_cn.ko"
            __validate "Habanalabs driver" "/lib/modules/$(uname -r)/extra/habanalabs.ko"
        ;;
        "rhel")
            __validate "Habanalabs net driver" "/lib/modules/$(uname -r)/extra/habanalabs_en.ko.xz"
            __validate "Habanalabs ib driver" "/lib/modules/$(uname -r)/extra/habanalabs_ib.ko.xz"
            __validate "Habanalabs cn driver" "/lib/modules/$(uname -r)/extra/habanalabs_cn.ko.xz"
            __validate "Habanalabs driver" "/lib/modules/$(uname -r)/extra/habanalabs.ko.xz"
        ;;
    esac
}

function __validate(){
    local -r message="${1}"
    local -r filename="${2}"
    local -r result=$(assert -f "${filename}")
    tablerow "${message}" "${result}"
}

function __validate_pt_packages(){
    __enable_output_log_to_tty
    if [ -z $HABANALABS_DISABLE_VALIDATION ]; then
        if [ -f "${HABANALABS_PROFILE_FILE}" ]; then
            # shellcheck disable=SC1090
            source ${HABANALABS_PROFILE_FILE}
        fi
        set +e
        python${MIN_PYTHON_VER} -c "import torch; from habana_frameworks.torch.utils.library_loader import load_habana_module; load_habana_module(); torch.rand(10).to('hpu')"
        if [ $? -ne 0 ]; then
            error "Habanalabs PyTorch test failed"
        else
            info "Habanalabs PyTorch test was completed successfully"
        fi
        set -e
    else
        info "Skipped Habana PyTorch test "
    fi
    __disable_output_log_to_tty
}

function __sh_parse_version() {
    local RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
    #MAJOR
    # shellcheck disable=SC2046
    eval $2=`echo $1 | sed -e "s#$RE#\1#"`
    #MINOR
    # shellcheck disable=SC2046
    eval $3=`echo $1 | sed -e "s#$RE#\2#"`
    #MINOR
    # shellcheck disable=SC2046
    eval $4=`echo $1 | sed -e "s#$RE#\3#"`
    #SPECIAL
    # shellcheck disable=SC2046
    eval $5=`echo $1 | sed -e "s#$RE#\4#"`
}

function __sh_version_eq() {
    local MAJOR_A=0
    local MINOR_A=0
    local PATCH_A=0
    local SPECIAL_A=0

    local MAJOR_B=0
    local MINOR_B=0
    local PATCH_B=0
    local SPECIAL_B=0

    __sh_parse_version $1 MAJOR_A MINOR_A PATCH_A SPECIAL_A
    __sh_parse_version $2 MAJOR_B MINOR_B PATCH_B SPECIAL_B

    if [ $MAJOR_A -ne $MAJOR_B ]; then
        echo 1; return
    fi

    if [ $MINOR_A -ne $MINOR_B ]; then
        echo 1; return
    fi

    if [ $PATCH_A -ne $PATCH_B ]; then
        echo 1; return
    fi

    if [[ "_$SPECIAL_A" != "_$SPECIAL_B" ]]; then
        echo 1; return
    fi
    echo 0; return
}

function __sh_version_lt() {
    local MAJOR_A=0
    local MINOR_A=0
    local PATCH_A=0
    local SPECIAL_A=0

    local MAJOR_B=0
    local MINOR_B=0
    local PATCH_B=0
    local SPECIAL_B=0

    __sh_parse_version $1 MAJOR_A MINOR_A PATCH_A SPECIAL_A
    __sh_parse_version $2 MAJOR_B MINOR_B PATCH_B SPECIAL_B

    if [ $MAJOR_A -lt $MAJOR_B ]; then
        echo 0
        return
    fi
    if [[ $MAJOR_A -le $MAJOR_B  && $MINOR_A -lt $MINOR_B ]]; then
        echo 0; return
    fi
    if [[ $MAJOR_A -le $MAJOR_B  && $MINOR_A -le $MINOR_B && $PATCH_A -lt $PATCH_B ]]; then
        echo 0; return
    fi
    if [[ "_$SPECIAL_A"  == "_" ]] && [[ "_$SPECIAL_B"  == "_" ]] ; then
        echo 1; return
    fi
    if [[ "_$SPECIAL_A"  == "_" ]] && [[ "_$SPECIAL_B"  != "_" ]] ; then
        echo 1; return
    fi
    if [[ "_$SPECIAL_A"  != "_" ]] && [[ "_$SPECIAL_B"  == "_" ]] ; then
        echo 0; return
    fi
    if [[ "_$SPECIAL_A" < "_$SPECIAL_B" ]]; then
        echo 0; return
    fi
    echo 1; return
}

habanalabs_installer.sh_install_command() {
  # echo "# this file is located in 'src/install_command.sh'"
  # echo "# code for 'habanalabs-installer.sh install' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  INSTALL_TYPE=""
  if [ -n "${args[--type]}" ]; then
      INSTALL_TYPE="${args[--type]}"
  fi
  if [ -n "${args[--venv]}" ]; then
    __python_user_opt="venv"
  fi
  # Install frameworks (PT) use user workspace (/home/USERNAME)
  # and before call '__init_action' func sould be redefine internal variables
  # Later on need to refactoring
  case $INSTALL_TYPE in
    "pt"|"pytorch")
      _SUDO_CMD=""
      HABANALABS_PROFILE_FILE="${HOME}/.habanalabsrc"
  ;;
  esac
  if [ -n "${args[--verbose]}" ]; then
    __verbose_mode="yes"
  fi
  __init_action
  header "Script arguments"
  __enable_output_log_to_tty
  inspect_args
  __disable_output_log_to_tty
  __print_env
  __prepaire_install "$INSTALL_TYPE"
  __pre_install "$INSTALL_TYPE"
  __force_install "Do you wish to install [y/n]: " "Break install"
  __install "$INSTALL_TYPE"

  __on_finish_script
}

habanalabs_installer.sh_uninstall_command() {
  # echo "# this file is located in 'src/install_command.sh'"
  # echo "# code for 'habanalabs-installer.sh install' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  __init_action
  header "Script arguments"
  inspect_args
  INSTALL_TYPE="uninstall"
  UNINSTALL_TYPE=""
  if [ -n "${args[--type]}" ]; then
      UNINSTALL_TYPE="${args[--type]}"
  fi
  if [ -n "${args[--verbose]}" ]; then
    __verbose_mode="yes"
  fi

  __print_env

  case $UNINSTALL_TYPE in
    "base"|"synapse"|"k8s")
      header "Previous Habanalabs software will be removed"
      pre_uninstall_base_packages
    ;;
    *)
      fatal "Break uninstall: the uninstallation type wrong. For help, run habanalabs-installer.sh uninstall --help"
    ;;
  esac

  FORCE_INSTALL=""
  if [ -n "${args[--force]}" ]; then
    FORCE_INSTALL="-y"
  else
    read -p "Do you with to continue [y/n]: " -r answer
    answer=${answer:-n}
    if [[ "$answer" == [Yy] ]]; then
      FORCE_INSTALL="-y"
    else
      fatal "Break uninstall"
    fi
  fi

  case $UNINSTALL_TYPE in
      "base"|"synapse"|"k8s")
          # install or update repos
          header "Uninstall Habanalabs software"
          uninstall_base_packages
      ;;
  esac

  __on_finish_script
}

habanalabs_installer.sh_upgrade_command() {
  # echo "# this file is located in 'src/install_command.sh'"
  # echo "# code for 'habanalabs-installer.sh install' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  mkdir -p ${HOME}/.habana_logs
  if [ -n "${args[--venv]}" ]; then
    __python_user_opt="venv"
  fi
  if [ -n "${args[--verbose]}" ]; then
    __verbose_mode="yes"
  fi
  UPGRADE_TYPE="all"
  if [ -n "${args[--type]}" ]; then
      UPGRADE_TYPE="${args[--type]}"
  fi
  __init_action
  header "Script arguments"
  __enable_output_log_to_tty
  inspect_args
  __disable_output_log_to_tty
  __print_env
  FORCE_INSTALL="-y"

  check_hold_packages

  case $UPGRADE_TYPE in
    "base"|"synapse")
      __pre_install "base"
      __install "base"
    ;;
    "deps"|"dependencies")
      __pre_install "deps"
      __install "deps"
    ;;
    "pt"|"pytorch")
      _SUDO_CMD=""
      HABANALABS_PROFILE_FILE="${HOME}/.habanalabsrc"
      __pre_install "pt"
      __install "pt"
    ;;
    "all")
      __pre_install "base"
      __install "base"

      __pre_install "deps"
      __install "deps"

      _SUDO_CMD=""
      HABANALABS_PROFILE_FILE="${HOME}/.habanalabsrc"
      __pre_install "pt"
      __install "pt"
    ;;
    *)
      fatal "Unknown upgrade type: $UPGRADE_TYPE"
  esac

  __on_finish_script
}

habanalabs_installer.sh_validate_command() {
  # echo "# this file is located in 'src/validate_command.sh'"
  # echo "# code for 'habanalabs-installer.sh validate' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"

  # inspect_args
  __init_action

  INSTALL_TYPE="validate"

  __print_env

  if [[ " ${SUPPORTED_OS[*]} " != *"$OS_NAME$OS_VERSION"* ]];
  then
      fatal "No, your OS $OS_NAME$OS_VERSION is not supported."
  fi

  header "System"
  __enable_output_log_to_tty
  info "CPU: $(nproc)"
  $_SUDO_CMD lscpu | grep -i "Model name" | tr -s ' '
  $_SUDO_CMD cat /proc/meminfo | grep "MemTotal"| tr -s ' '
  $_SUDO_CMD grep -i Hugepagesize /proc/meminfo | tr -s ' '
  __disable_output_log_to_tty
  header "OS environment"
  __enable_output_log_to_tty
  #info "Package manager ... [$__pkg__]"
  tablerow "Package manager" "$(info "[$__pkg__]")"
  is_sudo_available_report
  __detect_installed_python
  __disable_output_log_to_tty
  # detect_python "3"
  # detect_python "2.7"

  header "Basic dependencies"
  __enable_output_log_to_tty
  check_dependecies "${BASIC_SCRIPT_DEPENDENCIES}"
  check_dependecies "${_DEPENDENCIES}"
  header "PyTorch dependencies"
  __enable_output_log_to_tty
  __detect_installed_packages "${HABANALABS_PT_DEPENDENCIES}"
  __detect_current_cmake
  __info_openmpi
  __disable_output_log_to_tty

  header "Installed Habanalabs software"
  __enable_output_log_to_tty
  pre_uninstall_base_packages
  __disable_output_log_to_tty
  # checkDiskSpace
  __on_finish_script
}

parse_requirements() {

  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    habanalabs_installer.sh_usage
    exit
    ;;

  esac

  export HABANA_SERVER_NAME="${HABANA_SERVER_NAME:-vault.habana.ai}"
  export HABANALABS_INSTALLER_LOG="${HABANALABS_INSTALLER_LOG:-$HOME/habanalabs-installer-log/install-$(date -d "today" +"%Y-%m-%d-%H-%M-%S").log}"
  export HABANALABS_VIRTUAL_DIR="${HABANALABS_VIRTUAL_DIR:-$HOME/habanalabs-venv}"

  action=${1:-}

  case $action in
  -* )
    ;;

  install )
    action="install"
    shift
    habanalabs_installer.sh_install_parse_requirements "$@"
    shift $#
    ;;

  uninstall )
    action="uninstall"
    shift
    habanalabs_installer.sh_uninstall_parse_requirements "$@"
    shift $#
    ;;

  upgrade )
    action="upgrade"
    shift
    habanalabs_installer.sh_upgrade_parse_requirements "$@"
    shift $#
    ;;

  validate )
    action="validate"
    shift
    habanalabs_installer.sh_validate_parse_requirements "$@"
    shift $#
    ;;

  "" )
    habanalabs_installer.sh_usage
    exit 1
    ;;

  * )
    action="install"
    habanalabs_installer.sh_install_parse_requirements "$@"
    shift $#
    ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )

      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

}

habanalabs_installer.sh_install_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    habanalabs_installer.sh_install_usage
    exit
    ;;

  esac

  action="install"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --type | -t )

      if [[ -n ${2+x} ]]; then

        args[--type]="$2"
        shift
        shift
      else
        printf "%s\n" "--type requires an argument: --type, -t INSTALL_TYPE"
        exit 1
      fi
      ;;

    --force | -y )

      args[--force]=1
      shift
      ;;

    --venv )

      args[--venv]=1
      shift
      ;;

    --skip-driver-load )

      args[--skip-driver-load]=1
      shift
      ;;

    --skip-install-firmware )

      args[--skip-install-firmware]=1
      shift
      ;;

    --private-access-name )

      if [[ -n ${2+x} ]]; then

        args[--private-access-name]="$2"
        shift
        shift
      else
        printf "%s\n" "--private-access-name requires an argument: --private-access-name PRIVATE_ACCESS_NAME"
        exit 1
      fi
      ;;

    --private-access-token )

      if [[ -n ${2+x} ]]; then

        args[--private-access-token]="$2"
        shift
        shift
      else
        printf "%s\n" "--private-access-token requires an argument: --private-access-token PRIVATE_ACCESS_TOKEN"
        exit 1
      fi
      ;;

    --verbose | -v )

      args[--verbose]=1
      shift
      ;;

    --skip-habanalabs-repo )

      args[--skip-habanalabs-repo]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )

      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

  [[ -n ${args[--type]:-} ]] || args[--type]="base"
  [[ -n ${args[--private-access-name]:-} ]] || args[--private-access-name]=""
  [[ -n ${args[--private-access-token]:-} ]] || args[--private-access-token]=""

}

habanalabs_installer.sh_uninstall_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    habanalabs_installer.sh_uninstall_usage
    exit
    ;;

  esac

  action="uninstall"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --type | -t )

      if [[ -n ${2+x} ]]; then

        args[--type]="$2"
        shift
        shift
      else
        printf "%s\n" "--type requires an argument: --type, -t UNINSTALL_TYPE"
        exit 1
      fi
      ;;

    --force | -y )

      args[--force]=1
      shift
      ;;

    --verbose | -v )

      args[--verbose]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )

      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

  [[ -n ${args[--type]:-} ]] || args[--type]="base"

}

habanalabs_installer.sh_upgrade_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    habanalabs_installer.sh_upgrade_usage
    exit
    ;;

  esac

  action="upgrade"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --type | -t )

      if [[ -n ${2+x} ]]; then

        args[--type]="$2"
        shift
        shift
      else
        printf "%s\n" "--type requires an argument: --type, -t UPGRADE_TYPE"
        exit 1
      fi
      ;;

    --venv )

      args[--venv]=1
      shift
      ;;

    --skip-driver-load )

      args[--skip-driver-load]=1
      shift
      ;;

    --skip-install-firmware )

      args[--skip-install-firmware]=1
      shift
      ;;

    --verbose | -v )

      args[--verbose]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )

      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

  [[ -n ${args[--type]:-} ]] || args[--type]="all"

}

habanalabs_installer.sh_validate_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    habanalabs_installer.sh_validate_usage
    exit
    ;;

  esac

  action="validate"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )

      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

}

initialize() {
  version="1.20.1-97"
  long_usage=''
  set -e

  set -E

  __SCRIPT_STARTTIME=$(date +%s)

  if is_root; then
      _SUDO_CMD=""
  fi

  if [ -f "${SCRIPT_DIR}"/.env.dev ]; then
      # shellcheck source=/dev/null
      source "${SCRIPT_DIR}"/.env.dev
      REWRITE_CONF=$(realpath "${SCRIPT_DIR}"/.env.dev)
  fi

  if [ -f $HABANALABS_SCRIPT_LOCK_FILE ]; then
      fatal "Installer is still running in another process or a previous run failed unexpectedly. Please remove lock file $HABANALABS_SCRIPT_LOCK_FILE"
  fi

  function _brreak_ctrl_c() {
      fatal "Unexpected end of script"
  }

  function _trap_error() {
      local exit_code=$?
      local command="$BASH_COMMAND"
      __enable_output_log_to_tty
      error "ERROR: An error was encountered on line $BASH_LINENO of the script"
      if [ "$DEBUG" == "true" ]; then
          error "ERROR: $command"
      fi
      error "ERROR: Exit code ($exit_code)"
      __disable_output_log_to_tty
      fatal ""
  }

  trap _brreak_ctrl_c INT
  trap _trap_error ERR

  detect_os
  detect_device

  __extra_index_url="--extra-index-url ${HABANALABS_EXTRA_INDEX_URL}"

  case $OS_NAME in
      "ubuntu"|"debian")
          __pkg__="apt"
          HABANALABS_DRIVER="habanalabs-dkms"
          _HABANALABS_REPO_DIR="/etc/apt/sources.list.d"
          _DEPENDENCIES=$DEB_DEPENDENCIES
          __pkg_man__="dpkg-query -l"
          __separator__="="
          case $OS_VERSION in
              "20.04"|"10.10")
                  HABANALABS_SRC_DEPENDENCIES="libjemalloc2 openssl libssl-dev"
              ;;
              "22.04")
                  HABANALABS_SRC_DEPENDENCIES="libjemalloc2"
                  MIN_PYTHON_VER="3.10"
                  HABANALABS_PT_PIP_VERSION="22.3.1"
                  HABANALABS_PT_SETUPTOOLS_VERSION="65.5.1"
                  HABANALABS_PIP_VERSION="${HABANALABS_PT_PIP_VERSION}"
                  SETUPTOOLS_VERSION="${HABANALABS_PT_SETUPTOOLS_VERSION}"
              ;;
              "24.04")
                  HABANALABS_SRC_DEPENDENCIES="libjemalloc2"
                  MIN_PYTHON_VER="3.12"
                  HABANALABS_PT_PIP_VERSION="24.2"
                  HABANALABS_PT_SETUPTOOLS_VERSION="75.1.0"
                  HABANALABS_PIP_VERSION="${HABANALABS_PT_PIP_VERSION}"
                  SETUPTOOLS_VERSION="${HABANALABS_PT_SETUPTOOLS_VERSION}"
                  HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip libcurl4t64 moreutils iproute2 libcairo2-dev libglib2.0-dev libselinux1-dev libnuma-dev libpcre2-dev libatlas-base-dev libjpeg-dev liblapack-dev libnuma-dev google-perftools numactl libopenblas-dev"
              ;;
          esac
          HABANALABS_SRC_DEPENDENCIES="${HABANALABS_SRC_DEPENDENCIES} protobuf-compiler libgl1 libbz2-dev"
          HABANALABS_REPO_FILE='habanalabs_synapseai.list'
          if [[ $OS_NAME == "debian" ]]; then
              _DEPENDENCIES="${_DEPENDENCIES} libdrm-dev"
              HABANALABS_PT_SETUPTOOLS_VERSION="${HABANALABS_PT_SETUPTOOLS_VERSION_DEBIAN}"
          else
              _DEPENDENCIES="${_DEPENDENCIES} linux-modules-extra-${HEADER_VER}"
          fi
          export DEBIAN_FRONTEND=noninteractive
          OVERWRITE_CONF_FILES="-o Dpkg::Options::=\"--force-confnew\""
      ;;
      "centos")
          __pkg__="yum"
          __pkg_man__="rpm -qa"
          __suffix__=$(rpm --eval='%{dist}' | sed "s/\.centos//")
          __install_epel__="${__pkg__} install -y epel-release"
          HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip redhat-lsb-core openmpi-devel cairo-devel numactl-devel iproute git which libjpeg-turbo-devel zlib-devel lapack-devel sox numactl openblas-devel"
      ;;
      "amzn")
          __pkg__="yum"
          __pkg_man__="rpm -qa"
          __suffix__=$(rpm --eval='%{dist}' | sed "s/\.centos//")
          __install_epel__="amazon-linux-extras install -y epel"
          HABANALABS_SRC_DEPENDENCIES="${HABANALABS_SRC_DEPENDENCIES} gcc-c++ gcc10-c++ system-lsb-core libffi libffi-devel bzip2-devel"
          HABANALABS_K8S_DEPENDENCIES="kernel-${HEADER_VER} kernel-devel-${HEADER_VER} kernel-headers-${HEADER_VER}"
          HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip system-lsb-core openmpi-devel cairo-devel numactl-devel iproute git which libjpeg-turbo-devel zlib-devel lapack-devel sox numactl openblas-devel"
      ;;
      "rhel")
          __pkg__="dnf"
          __pkg_man__="rpm -qa"
          __suffix__=$(rpm --eval='%{dist}' | sed "s/\.centos//")
          case $OS_VERSION in
              "9.2")
                  MIN_PYTHON_VER="3.10"
                  __install_epel__="${__pkg__} install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
                  HABANALABS_SRC_DEPENDENCIES="${HABANALABS_SRC_DEPENDENCIES} gcc-c++ lsb_release libffi-devel bzip2 bzip2-devel "
                  HABANALABS_K8S_DEPENDENCIES="${HABANALABS_BASE_DEPENDENCIES} kernel-devel-${HEADER_VER} kernel-core-${HEADER_VER} kernel-modules-core-${HEADER_VER} dkms"
                  HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip lsb_release openmpi-devel cairo-devel numactl-devel iproute git which libjpeg-turbo-devel zlib-devel lapack lapack-devel gperftools.x86_64 numactl openblas-devel"
              ;;
              "9.4")
                  MIN_PYTHON_VER="3.11"
                  __install_epel__="${__pkg__} install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
                  HABANALABS_SRC_DEPENDENCIES="${HABANALABS_SRC_DEPENDENCIES} gcc-c++ lsb_release libffi-devel bzip2 bzip2-devel "
                  HABANALABS_K8S_DEPENDENCIES="${HABANALABS_BASE_DEPENDENCIES} kernel-devel-${HEADER_VER} kernel-core-${HEADER_VER} kernel-modules-core-${HEADER_VER} dkms"
                  HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip lsb_release openmpi-devel cairo-devel numactl-devel iproute git which libjpeg-turbo-devel zlib-devel lapack lapack-devel gperftools.x86_64 numactl openblas-devel"
              ;;
              "8.6")
                  MIN_PYTHON_VER="3.11"
                  __install_epel__="${__pkg__} install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
                  HABANALABS_SRC_DEPENDENCIES="${HABANALABS_SRC_DEPENDENCIES} gcc-c++ redhat-lsb-core libffi-devel bzip2 bzip2-devel"
                  HABANALABS_K8S_DEPENDENCIES="kernel-${HEADER_VER} kernel-devel-${HEADER_VER} kernel-headers-${HEADER_VER}"
                  HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip redhat-lsb-core openmpi-devel cairo-devel numactl-devel iproute git which libjpeg-turbo-devel zlib-devel lapack lapack-devel gperftools.x86_64 numactl openblas-devel-0.3.15-3.el8"
              ;;
              *)
                  __install_epel__="${__pkg__} install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
                  HABANALABS_SRC_DEPENDENCIES="${HABANALABS_SRC_DEPENDENCIES} gcc-c++ redhat-lsb-core libffi-devel bzip2 bzip2-devel"
                  HABANALABS_K8S_DEPENDENCIES="kernel-${HEADER_VER} kernel-devel-${HEADER_VER} kernel-headers-${HEADER_VER}"
                  HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip redhat-lsb-core openmpi-devel cairo-devel numactl-devel iproute git which libjpeg-turbo-devel zlib-devel lapack lapack-devel gperftools.x86_64 numactl openblas-devel"
              ;;
          esac
      ;;
      "tencentos")
          MIN_PYTHON_VER="3.10"
          __pkg__="dnf"
          __pkg_man__="rpm -qa"
          __suffix__=$(rpm --eval='%{dist}' | sed "s/\.centos//")
          __install_epel__="${__pkg__} install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"

          KERNEL_DEVEL_DEPS="kernel-devel-${HEADER_VER}.tl3"
          KERNEL_DEPS="kernel-modules-${HEADER_VER}.tl3.x86_64 ${KERNEL_DEVEL_DEPS} kernel-headers-${HEADER_VER}.tl3"

          if [ "${HEADER_VER}" == "5.4.203-1-tlinux4-0011.spr.0003.1" ];then
              KERNEL_DEVEL_DEPS="kernel-tlinux4-intel-devel-5.4.203-1.0011.spr.0003.1.tl3"
              KERNEL_DEPS="kernel-tlinux4-intel-modules-5.4.203-1.0011.spr.0003.1.tl3.x86_64 ${KERNEL_DEVEL_DEPS} kernel-tlinux4-intel-headers-5.4.203-1.0011.spr.0003.1.tl3"
          fi

          HABANALABS_SRC_DEPENDENCIES="${HABANALABS_SRC_DEPENDENCIES} redhat-lsb-core libffi-devel bzip2-devel"
          HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} unzip redhat-lsb-core gcc-c++ openmpi-devel cairo-devel numactl-devel iproute git which libjpeg-turbo-devel zlib-devel lapack lapack-devel gperftools.x86_64 numactl openblas-devel"
          HABANALABS_K8S_DEPENDENCIES="${HABANALABS_BASE_DEPENDENCIES} dkms ${KERNEL_DEPS} kernel-rpm-macros"
          HABANALABS_MLNX_DEPENDENCIES="python36 python36-devel wget createrepo ${KERNEL_DEVEL_DEPS} tcsh gcc-gfortran libtool gcc rpm-build autoconf kernel-rpm-macros gdb-headless automake tk tcl"
      ;;
      "sles")
          export PATH=$PATH:/sbin
          MIN_PYTHON_VER="3.11"
          __pkg__="zypper"
          __pkg_man__="rpm -qa"
          __suffix__=""
          _HABANALABS_REPO_DIR="/etc/zypp/repos.d"
          HABANALABS_PKG_INSTALL_OPTION="--allow-downgrade"
          _DEPENDENCIES=""
          HABANALABS_PT_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} cairo-devel numactl lapack-devel gperftools-devel"
          HABANALABS_SRC_DEPENDENCIES="${BASIC_SCRIPT_DEPENDENCIES} gcc-c++ cpp jemalloc cmake unzip libffi-devel zlib-devel libbz2-devel libzip-devel libarchive-devel libjpeg62-devel lbzip2 lsof iproute lsb-release openblas-common-devel ffmpeg Mesa-libGL1 Mesa-libGL-devel"
      ;;
  esac

}

run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "install" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      habanalabs_installer.sh_install_usage
    else
      habanalabs_installer.sh_install_command
    fi

  elif [[ $action == "uninstall" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      habanalabs_installer.sh_uninstall_usage
    else
      habanalabs_installer.sh_uninstall_command
    fi

  elif [[ $action == "upgrade" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      habanalabs_installer.sh_upgrade_usage
    else
      habanalabs_installer.sh_upgrade_command
    fi

  elif [[ $action == "validate" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      habanalabs_installer.sh_validate_usage
    else
      habanalabs_installer.sh_validate_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
